--
if getgenv().Module then return getgenv().Module end

-- 
local Workspace, Players, RunService, GuiService = game:GetService("Workspace"), game:GetService("Players"), game:GetService("RunService"), game:GetService("GuiService")

-- 
local CurrentCamera, LocalPlayer, Heartbeat = Workspace.CurrentCamera, Players.LocalPlayer, RunService.Heartbeat 

-- 
local Mouse = LocalPlayer:GetMouse()

-- 
local Drawingnew = Drawing.new
local Color3fromRGB = Color3.fromRGB
local Vector2new = Vector2.new

--
local GetGuiInset = GuiService.GetGuiInset
local Randomnew = Random.new
local mathfloor = math.floor

--
local CharacterAdded = LocalPlayer.CharacterAdded
local CharacterAddedWait = CharacterAdded.Wait

--
local WorldToViewportPoint = CurrentCamera.WorldToViewportPoint
local RaycastParamsnew = RaycastParams.new
local EnumRaycastFilterTypeBlacklist = Enum.RaycastFilterType.Blacklist

--
local Raycast = Workspace.Raycast
local GetPlayers = Players.GetPlayers
local Instancenew = Instance.new

--
local IsDescendantOf = Instancenew("Part").IsDescendantOf
local FindFirstChildWhichIsA = Instancenew("Part").FindFirstChildWhichIsA
local FindFirstChild = Instancenew("Part").FindFirstChild

--
local tableremove = table.remove
local tableinsert = table.insert

--
getgenv().Module = {
    --
    Enabled = true,
    --

    --
    ShowFOV = false,
    --
    FOV = 30,
    --
    FOVSides = 10,
    --
    FOVColour = Color3fromRGB(0, 0, 0),
    --

    --
    VisibleCheck = true,
    --
    
    --
    HitChance = 100,
    --

    --
    Selected = nil,
    --
    SelectedPart = nil,
    --

    --
    TargetPart = {"Head"},
    --

    --
    Ignored = {
        --
        Teams = {
            --
            {
                --
                Team = LocalPlayer.Team,
                --
                TeamColor = LocalPlayer.TeamColor,
                --
            },
            --
        },
        --
        Players = {
            --
            LocalPlayer,
            --
            91318356
            --
        }
        --
    },
    --

    --
    RaycastIgnore = nil
    --
}
--

--
local Module = getgenv().Module

-- 
local circle = Drawingnew("Circle")
circle.Transparency = 1
circle.Thickness = 2
circle.Color = Module.FOVColour
circle.Filled = false
Module.FOVCircle = circle

-- 
function Module.UpdateFOV()
    -- 
    if not (circle) then
        return
    end

    -- 
    circle.Visible = Module.ShowFOV
    circle.Radius = (Module.FOV * 3)
    circle.Position = Vector2new(Mouse.X, Mouse.Y + GetGuiInset(GuiService).Y)
    circle.NumSides = Module.FOVSides
    circle.Color = Module.FOVColour

    -- 
    return circle
end

-- 
local CalcChance = function(percentage)
    -- 
    percentage = mathfloor(percentage)

    -- 
    local chance = mathfloor(Randomnew().NextNumber(Randomnew(), 0, 1) * 100) / 100

    -- 
    return chance <= percentage / 100
end

-- 
function Module.IsPartVisible(Part, PartDescendant)
    -- 
    local Character = LocalPlayer.Character or CharacterAddedWait(CharacterAdded)
    local Origin = CurrentCamera.CFrame.Position
    local _, OnScreen = WorldToViewportPoint(CurrentCamera, Part.Position)

    -- 
    if (OnScreen) then
        -- 
        local raycastParams = RaycastParamsnew()
        raycastParams.FilterType = EnumRaycastFilterTypeBlacklist
        raycastParams.FilterDescendantsInstances = Module.RaycastIgnore or {Character, CurrentCamera}

        -- 
        local Result = Raycast(Workspace, Origin, Part.Position - Origin, raycastParams)

        -- 
        if (Result) then
            -- 
            local PartHit = Result.Instance
            local Visible = (not PartHit or IsDescendantOf(PartHit, PartDescendant))

            -- 
            return Visible
        end
    end

    -- 
    return false
end

-- 
function Module.IgnorePlayer(Player)
    -- 
    local Ignored = Module.Ignored
    local IgnoredPlayers = Ignored.Players

    -- 
    for _, IgnoredPlayer in ipairs(IgnoredPlayers) do
        --
        if (IgnoredPlayer == Player) then
            return false
        end
    end

    -- 
    tableinsert(IgnoredPlayers, Player)
    return true
end

-- 
function Module.UnIgnorePlayer(Player)
    --
    local Ignored = Module.Ignored
    local IgnoredPlayers = Ignored.Players

    -- 
    for i, IgnoredPlayer in ipairs(IgnoredPlayers) do
        -- 
        if (IgnoredPlayer == Player) then
            -- 
            tableremove(IgnoredPlayers, i)
            return true
        end
    end

    -- 
    return false
end

-- 
function Module.IgnoreTeam(Team, TeamColor)
    -- 
    local Ignored = Module.Ignored
    local IgnoredTeams = Ignored.Teams

    -- 
    for _, IgnoredTeam in ipairs(IgnoredTeams) do
        -- 
        if (IgnoredTeam.Team == Team and IgnoredTeam.TeamColor == TeamColor) then
            return false
        end
    end

    -- 
    tableinsert(IgnoredTeams, {Team, TeamColor})
    return true
end

-- 
function Module.UnIgnoreTeam(Team, TeamColor)
    -- 
    local Ignored = Module.Ignored
    local IgnoredTeams = Ignored.Teams

    -- 
    for i, IgnoredTeam in ipairs(IgnoredTeams) do
        -- 
        if (IgnoredTeam.Team == Team and IgnoredTeam.TeamColor == TeamColor) then
            -- 
            tableremove(IgnoredTeams, i)
            return true
        end
    end

    -- 
    return false
end

-- 
function Module.TeamCheck(Toggle)
    if (Toggle) then
        return Module.IgnoreTeam(LocalPlayer.Team, LocalPlayer.TeamColor)
    end

    --
    return Module.UnIgnoreTeam(LocalPlayer.Team, LocalPlayer.TeamColor)
end

-- 
function Module.IsIgnoredTeam(Player)
    -- 
    local Ignored = Module.Ignored
    local IgnoredTeams = Ignored.Teams

    -- 
    for _, IgnoredTeam in ipairs(IgnoredTeams) do
        -- 
        if (Player.Team == IgnoredTeam.Team and Player.TeamColor == IgnoredTeam.TeamColor) then
            return true
        end
    end

    -- 
    return false
end

-- 
function Module.IsIgnored(Player)
    -- 
    local Ignored = Module.Ignored
    local IgnoredPlayers = Ignored.Players

    -- 
    for _, IgnoredPlayer in ipairs(IgnoredPlayers) do
        -- 
        if (typeof(IgnoredPlayer) == "number" and Player.UserId == IgnoredPlayer) then
            return true
        end

        -- 
        if (IgnoredPlayer == Player) then
            return true
        end
    end

    -- 
    return Module.IsIgnoredTeam(Player)
end

-- 
function Module.Raycast(Origin, Destination, UnitMultiplier)
    if (typeof(Origin) == "Vector3" and typeof(Destination) == "Vector3") then
        -- 
        if (not UnitMultiplier) then UnitMultiplier = 1 end

        --
        local Direction = (Destination - Origin).Unit * UnitMultiplier
        local Result = Raycast(Workspace, Origin, Direction)

        -- 
        if (Result) then
            local Normal = Result.Normal
            local Material = Result.Material

            return Direction, Normal, Material
        end
    end

    -- 
    return nil
end

-- 
function Module.Character(Player)
    return Player.Character
end

-- 
function Module.CheckHealth(Player)
    -- 
    local Character = Module.Character(Player)
    local Humanoid = FindFirstChildWhichIsA(Character, "Humanoid")

    -- 
    local Health = (Humanoid and Humanoid.Health or 0)

    -- 
    return Health > 0
end

-- 
function Module.Check()
    return (Module.Enabled == true and Module.Selected ~= LocalPlayer and Module.SelectedPart ~= nil)
end
Module.CheckTriggerbot = Module.Check

-- 
function Module.GetClosestTargetPartToCursor(Character)
    local TargetParts = Module.TargetPart

    -- 
    local ClosestPart = nil
    local ClosestPartPosition = nil
    local ClosestPartOnScreen = false
    local ClosestPartMagnitudeFromMouse = nil
    local ShortestDistance = 1/0

    -- 
    local function CheckTargetPart(TargetPart)
        -- 
        if (typeof(TargetPart) == "string") then
            TargetPart = FindFirstChild(Character, TargetPart)
        end

        -- 
        if not (TargetPart) then
            return
        end

        -- 
        local PartPos, onScreen = WorldToViewportPoint(CurrentCamera, TargetPart.Position)
        local GuiInset = GetGuiInset(GuiService)
        local Magnitude = (Vector2new(PartPos.X, PartPos.Y - GuiInset.Y) - Vector2new(Mouse.X, Mouse.Y)).Magnitude

        -- 
        if (Magnitude < ShortestDistance) then
            ClosestPart = TargetPart
            ClosestPartPosition = PartPos
            ClosestPartOnScreen = onScreen
            ClosestPartMagnitudeFromMouse = Magnitude
            ShortestDistance = Magnitude
        end
    end

    -- 
    if (typeof(TargetParts) == "string") then
        --
        if (TargetParts == "All") then
            -- 
            for _, v in ipairs(Character:GetChildren()) do
                -- 
                if not (v:IsA("BasePart")) then
                    continue
                end

                -- 
                CheckTargetPart(v)
            end
        else
            -- 
            CheckTargetPart(TargetParts)
        end
    end

    -- 
    if (typeof(TargetParts) == "table") then
        -- 
        for _, TargetPartName in ipairs(TargetParts) do
            CheckTargetPart(TargetPartName)
        end
    end

    -- 
    return ClosestPart, ClosestPartPosition, ClosestPartOnScreen, ClosestPartMagnitudeFromMouse
end

-- 
function Module.GetClosestPlayerToCursor()
    --
    local TargetPart = nil
    local ClosestPlayer = nil
    local Chance = CalcChance(Module.HitChance)
    local ShortestDistance = 1/0

    -- 
    if (not Chance) then
        Module.Selected = LocalPlayer
        Module.SelectedPart = nil

        return LocalPlayer
    end

    -- 
    for _, Player in ipairs(GetPlayers(Players)) do
        --
        local Character = Module.Character(Player)

        -- 
        if (Module.IsIgnored(Player) == false and Character) then
            -- 
            local TargetPartTemp, _, _, Magnitude = Module.GetClosestTargetPartToCursor(Character)

            -- 
            if (TargetPartTemp and Module.CheckHealth(Player)) then
                -- 
                if (circle.Radius > Magnitude and Magnitude < ShortestDistance) then
                    -- 
                    if (Module.VisibleCheck and not Module.IsPartVisible(TargetPartTemp, Character)) then continue end

                    -- 
                    ClosestPlayer = Player
                    ShortestDistance = Magnitude
                    TargetPart = TargetPartTemp
                end
            end
        end
    end

    -- 
    Module.Selected = ClosestPlayer
    Module.SelectedPart = TargetPart
end

-- 
Heartbeat:Connect(function()
    Module.UpdateFOV()
    Module.GetClosestPlayerToCursor()
end)

-- 
return Module
